{"version":3,"sources":["components/CardElement.js","components/GameBoard.js","components/GameOver.js","game/game.js","components/Sound.js","MemoryDino.js","reportWebVitals.js","index.js"],"names":["CardElement","props","onClick","handleFlip","card","id","className","flipped","src","icon","alt","GameBoard","cards","map","index","GameOver","show","handleRestart","game","lockMode","firstCard","secondCard","setCard","this","filter","checkMatch","clearCards","unflipCards","checkGameOver","length","techs","createCardsFromTechs","forEach","tech","push","createPairFromtech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","eggCracking","egg","Audio","playbackRate","addEventListener","play","roarMatch","roar","flipCard","cardId","gameOverCallBack","noMatchCallback","setTimeout","SoundEfect","loop","MemoryDino","useState","gameOver","setGameOver","setCards","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ce7910f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function CardElement(props) {\r\n    return (\r\n        <div onClick={() => { props.handleFlip(props.card) }} id={props.card.id} className={`card ${props.card.flipped ? \"flip\" : \"\"}`}>\r\n            <div className=\"card_front\">\r\n                <img className=\"icon\"\r\n                    src={`assets/images/${props.card.icon}.png`}\r\n                    alt={props.card.icon}></img>\r\n            </div>\r\n            <div className=\"card_back\">\r\n                <div className='egg'>&#129370;</div>\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}","import React from \"react\";\r\nimport CardElement from './CardElement';\r\n\r\nexport default function GameBoard(props) {\r\n    return (\r\n        <div id=\"gameBoard\">\r\n            {props.cards.map((card, index) =>\r\n                <CardElement handleFlip={props.handleFlip} key={index} card={card}></CardElement>\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, { Fragment } from \"react\";\r\n\r\nexport default function GameOver(props) {\r\n    return (props.show ?\r\n        <div id=\"gameOver\">\r\n            <div>\r\n                Parabéns, você completou o Jogo!\r\n            </div>\r\n            <button id=\"restart\" onClick={props.handleRestart}>Jogue novamente</button>\r\n        </div> : <Fragment />\r\n    );\r\n}","let game = {\r\n    lockMode: false,\r\n    firstCard: null,\r\n    secondCard: null,\r\n\r\n    setCard: function (id) {\r\n\r\n        let card = this.cards.filter(card => card.id === id)[0];\r\n\r\n        if (card.flipped || this.lockMode) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.firstCard) {\r\n            this.firstCard = card;\r\n            this.firstCard.flipped = true;\r\n            return true;\r\n        } else {\r\n\r\n            this.secondCard = card;\r\n            this.secondCard.flipped = true;\r\n            this.lockMode = true;\r\n            return true;\r\n        }\r\n    },\r\n\r\n    checkMatch: function () {\r\n\r\n        if (!this.firstCard || !this.secondCard) {\r\n            return false;\r\n        }\r\n\r\n        return this.firstCard.icon === this.secondCard.icon;\r\n    },\r\n\r\n    clearCards: function () {\r\n        this.firstCard = null;\r\n        this.secondCard = null;\r\n        this.lockMode = false;\r\n    },\r\n\r\n    unflipCards: function () {\r\n        this.firstCard.flipped = false;\r\n        this.secondCard.flipped = false;\r\n        this.clearCards();\r\n\r\n    },\r\n\r\n\r\n    checkGameOver: function () {\r\n        return this.cards.filter(card => !card.flipped).length === 0;\r\n    },\r\n\r\n    techs: ['01',\r\n        '02',\r\n        '03',\r\n        '04',\r\n        '05',\r\n        '06',\r\n        '07',\r\n        '08',\r\n        '09',\r\n        '10'],\r\n    cards: null,\r\n\r\n    createCardsFromTechs: function () {\r\n\r\n        this.cards = [];\r\n\r\n        this.techs.forEach((tech) => {\r\n            this.cards.push(this.createPairFromtech(tech));\r\n        });\r\n\r\n        this.cards = this.cards.flatMap(pair => pair);\r\n        this.shuffleCards();\r\n        return this.cards;\r\n    },\r\n\r\n    createPairFromtech: function (tech) {\r\n        return [{\r\n            id: this.createIdWithTech(tech),\r\n            icon: tech,\r\n            flipped: false,\r\n        }, {\r\n            id: this.createIdWithTech(tech),\r\n            icon: tech,\r\n            flipped: false,\r\n        }]\r\n    },\r\n\r\n    createIdWithTech: function (tech) {\r\n        return tech + parseInt(Math.random() * 1000);\r\n    },\r\n\r\n    shuffleCards: function (cards) {\r\n        let currentIndex = this.cards.length;\r\n        let randomIndex = 0;\r\n\r\n        while (currentIndex !== 0) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]];\r\n        }\r\n    },\r\n\r\n    eggCracking: function() {\r\n        //Play egg cracking when flip cards\r\n        let egg = new Audio('assets/sons/egg-cracking.mp3');\r\n        egg.playbackRate = 2;\r\n        egg.addEventListener('canplaythrough', () => egg.play());\r\n    \r\n    },\r\n\r\n    roarMatch: function(){\r\n         //Play roar when match cards\r\n         let roar = new Audio('assets/sons/dino-roar.mp3');\r\n         roar.addEventListener('canplaythrough', () => roar.play());\r\n    },\r\n\r\n    flipCard: function(cardId, gameOverCallBack, noMatchCallback){\r\n        this.eggCracking();\r\n        if (this.setCard(cardId)) {\r\n            if (this.secondCard) {\r\n                if (this.checkMatch()) {\r\n                    this.clearCards();\r\n                    this.roarMatch();\r\n                    if (this.checkGameOver()) {\r\n                        //Game Over\r\n                        gameOverCallBack();\r\n                    }\r\n                } else {\r\n                    setTimeout(() => {\r\n                        //No Match\r\n                        this.unflipCards();\r\n                        noMatchCallback();\r\n                    }, 1000);\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default game;","import React from \"react\";\r\n\r\nexport default function SoundEfect() {\r\n\r\n\r\n    return (\r\n        <div id='bg-sound-control'>\r\n            <audio src=\"assets/sons/wild-hunter.mp3\" loop id='bg-sound'></audio>\r\n            <span className=\"material-icons\" id=\"sound-mute\" >\r\n                volume_up\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport GameOver from \"./components/GameOver\";\r\nimport game from \"./game/game\";\r\nimport SoundEfect from \"./components/Sound\";\r\n\r\nexport default function MemoryDino() {\r\n\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [cards, setCards] = useState([])\r\n\r\n    useEffect(() => {\r\n        setCards(game.createCardsFromTechs())\r\n    }, [])\r\n\r\n    function restart() {\r\n        game.clearCards()\r\n        setCards(game.createCardsFromTechs())\r\n        setGameOver(false)\r\n    }\r\n\r\n    function handleFlip(card) {\r\n\r\n        game.flipCard(card.id, () => {\r\n            //GameOverCallBack\r\n            setGameOver(true)\r\n        \r\n        }, () => {\r\n            //NoMatchCallback\r\n            setCards([...game.cards])\r\n        \r\n        })\r\n        setCards([...game.cards])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SoundEfect></SoundEfect>\r\n            <GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\r\n            <GameOver show={gameOver} handleRestart={restart}></GameOver>\r\n        </div>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MemoryDino from './MemoryDino';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MemoryDino />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}